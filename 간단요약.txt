mysql
ifnull(comm, 숫자) null에 숫자 만큼을 부여 하여 출력
where 컬럼 is null      null출력               ex)보너스가 없는 사람출력
where 컬럼 is not null  null을 출력하지 않는다. ex)보너스가 있는 사람출력

date_format(hidedate, '%Y') > 숫자  입사날짜가 1982년에 입사 where date_format(hidedate, '%Y') > 1982

from emp as e                           --emp 테이블 별칭 e
inner join dept as d                    --dept 테이블 별칭 d
on e.deptno = d.deptno                  --emp 테이블과 dept 테이블  컬럼 deptno를 교집합
inner join emp as boss                  --emp 테이블 끼리를 셀프 조인 별칭 boss
on e.mgr = boss.empno                   --mgr 컬럼과 empno컬럼을 교집합

사원명, 사수번호, 사수 이름을 출력
   단, 사수가 없는 사원도 포함
select
 sawon.ename as '사원명',               
 sawon.empno as '사수번호',
 boss.ename as '사수이름'
from emp as sawon                      --emp 테이블 별칭 sawon 
left join emp as boss                  --emp 테이블 별칭 boss
on sawon.mgr = boss.empno              --emp 테이블 에서  컬럼 sawon.mgr과 컬럼boss.empno 를 묶다

사수가 없는 사원도포함 <-- ~가 없는 ~도 포함일경우 outer(left, right)조인을 사용

        --자바 끝 --
        1.if/else, for ,while ,배열 (반복문친구)
        2. 클래스, 메소드 **자바특징
        3.제네릭 컬렉션 *****

JAVA

 int 변수 = 변수성립;  //변수 만들기
 ++i                  //증강연산자 자신에게 +1을 더함
 변수 = 변수변경;      //변수 재정의
 변수 += i            //  변수 = 변수+i와 동일
 if  / else          //if(만약 ~ 라면 실행) else(if가 아니라면 실행)
 if/ else if /else   //if문에서 if문이 아니라면 실행 후 모두아니라면 else 실행
 for(int i=0;i 연산 숫자;++i) //반복문 i가 0으로 가정하여 숫자만큼 실행 /실행순서 int i =0; ->i 연산 숫자 -> 코드 ->++i실행
 for문 2중for문      //int i=0; -> i 연산 숫자; ->2중포문 -> 2중포문 int j =0 -> j연산 숫자 -> ++j -> ++i -> i 연산 숫자 가 만족될때까지 반복하며 한번의 i문에 j연산 숫자 만큼 출력 되며 반복
                       1번재 for문의 초기문 -> 조건문 ->코드(2중폴문) -> 2중폴문의 초기문 ->조건문 ->코드 -> 증강연산자 or 감소연산자 사용-> 첫 for문의 연산자 사용 -> for문의 초기 ->조건 ->코드 반복. 
while(true) /break  // while 는 진실일경우 실행되며 아닐경우 무한반복 break 는 break 에 정해진 숫자에 반복을 정지       
int 배열[] = {숫자,숫자}; //변수 배열에 숫자를 담다 012~... 0부터
 
메소드
 <접근지정자> <리턴타입> <메소드이름> <인자값>
   public      int        
   private     double
   protected   String
   default     ...
               void

메인함수 = 실행(결과값을 보여줌)
접근지정자로 만든 메소드 = 식

DB와 연동시
1)예시
select                 //리턴타입
 ename
from emp
where empno= <번호>    //where 의값이 인자값

*****메소드 오버로딩(overloading):
목적:이름이 같은 여러개의 메소드를 중복 선언하여 사용의 편리성을 제공

조건:1.이름이 동일해야함.
     2.인자의 개수가 달라야 함. //(int x, int y) -- (int x, int y,int z)
     3.인자의 타입이 달라야 함. //(int x, int y) -- (int x, String y)
     4.동일한 클래스 파일 안에 있어야 함. 

결론: 메소드는 파라미터가 중요함.
문자열 메소드 
1. toLowerCase 대문자를->소문자로

2. toUpperCase 소문자를 -> 대문자로

3.split("") -> ""안에잇는 특수문자 로 문단을 나눠줌 
ex)010-1111-2222 String array[] = phone.split("-"); System.out.println(array[0]); = 010 / System.out.println(array[1])=1111 / System.out.println(array[2])=2222

4.length() -> 글자수제한
ex)if(len >= 5) {
			System.out.println("닉네임은 4글자 이하로만 작성 가능합니다.");
		}

5.replace("", "") -> ("","") 첫번재""의 글자를 두번쨰 ""로 대체

6.int 변수 = Integer.parseInt(문자) -> 문자를 변수(숫자)로 변화
